name: Build corefront dockers

on:
  push:
    branches:
      - dev
    tags:
      - '*'
  pull_request:

env:
  jessie_version: debian8
  jessie_navitia_components: 'tyr-web instances-configurator'
  bullseye_version: debian11
  bullseye_navitia_components: 'jormungandr'
  REGION: eu-west-1
jobs:
  aws_credentials:
    name: Init credentials
    runs-on: [self-hosted, corefront, sandbox]
    outputs:
      aws_token: ${{ steps.ecr_token.outputs.token }}
    steps:
      - name: Get ECR Token
        id: ecr_token
        run: |
          echo token=$(aws ecr get-login-password --region $REGION) >> $GITHUB_OUTPUT

  common_variables:
    name: Common variables
    needs: aws_credentials
    runs-on: [self-hosted, corefront, sandbox]
    container:
      image: 162230498103.dkr.ecr.eu-west-1.amazonaws.com/mutable-debian11_dev:latest
      credentials:
        username: AWS
        password: ${{ needs.aws_credentials.outputs.aws_token }}

    outputs:
      NAVITIA_TAG: ${{ steps.choose_navitia_tag.outputs.navitia_tag }}
      AWS_BRANCH: ${{ steps.choose_navitia_tag.outputs.aws_branch }}
    steps:
      - name: Install dependencies
        run: apt update && apt install -y httpie

      - name: Generate github private access token
        id: ci-core-app-token
        uses: getsentry/action-github-app-token@v2.0.0
        with:
          app_id: ${{ secrets.CI_CORE_APP_ID }}
          private_key: ${{ secrets.CI_CORE_APP_PEM }}

      - name: Checkout navitia
        id: checkout_navitia
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ steps.ci-core-app-token.outputs.token }}
          # we need entire history for tags
          fetch-depth: 0

      - name: Choose navitia tag
        id: choose_navitia_tag
        run: |
          git config --global --add safe.directory /__w/navitia/navitia
          if [[ '${{ github.event_name }}' == 'push' && '${{ github.ref }}' == 'refs/heads/dev' ]]
          then
            echo "navitia_tag=dev" >> $GITHUB_OUTPUT
            echo "aws_branch=dev" >> $GITHUB_OUTPUT
          else
            version=$(git describe --tags)
            echo "navitia_tag=$version" >> $GITHUB_OUTPUT
            echo "aws_branch=release" >> $GITHUB_OUTPUT
          fi


  bullseye_builder:
    runs-on: [self-hosted, corefront, sandbox]
    name: Bullseye builder
    needs: [common_variables, aws_credentials]

    container:
      image: 162230498103.dkr.ecr.eu-west-1.amazonaws.com/mutable-debian11_dev:latest
      credentials:
        username: AWS
        password: ${{ needs.aws_credentials.outputs.aws_token }}

    steps:
      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y httpie

      - name: Install docker
        run: |
          apt-get install -y ca-certificates curl gnupg
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gp
          chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install docker-ce docker-ce-cli containerd.io
          docker --version

      - name: Generate github private access token
        id: ci-core-app-token
        uses: getsentry/action-github-app-token@v2.0.0
        with:
          app_id: ${{ secrets.CI_CORE_APP_ID }}
          private_key: ${{ secrets.CI_CORE_APP_PEM }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ steps.ci-core-app-token.outputs.token }}
          # we need entire history for tags
          fetch-depth: 0

      - name: Restore ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build_dockers
          max-size: 2000M

      - name: Create builder docker
        run: |
          docker build -f docker/${{env.bullseye_version}}/Dockerfile-builder -t navitia/builder .

      - name: Build navitia
        run: |
          docker run -v `pwd`:/navitia/navitia/  navitia/builder

      - name: Create navitia images
        run: |
          for component in ${{env.bullseye_navitia_components}}; do
              echo "*********  Building $component Tag: ${{ needs.common_variables.outputs.NAVITIA_TAG }} ***************"
              docker build -t navitia/$component:${{ needs.common_variables.outputs.NAVITIA_TAG }} -f  docker/${{env.bullseye_version}}/Dockerfile-${component} .
          done
