name: Build Navitia Dockers

on:
  push:
    branches:
      - dev
    tags:
      - '*'
  pull_request:

env:
  debian_version: debian8

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        apt update && apt install -y --force-yes zip httpie

    - name: Checkout core_team_ci_tools
      uses: actions/checkout@v3
      with:
        repository : 'hove-io/core_team_ci_tools'
        path: core_team_ci_tools
        token: ${{ secrets.access_token_github }}

    - name: Setup core_team_ci_tools python environment
      run: |
        pip install -r core_team_ci_tools/github_artifacts/requirements.txt --user

    - name: Download mimirsbrunn package
      run: |
        mimirsbrunn_package="debian-package-release.zip"
        python core_team_ci_tools/github_artifacts/github_artifacts.py \
            -o hove-io \
            -r mimirsbrunn \
            -t ${{secrets.access_token_github}} \
            -w release.yml \
            -a $mimirsbrunn_package \
            --output-dir .
        unzip -qo $mimirsbrunn_package
        rm -f $mimirsbrunn_package

    - name: Download cosmogony2cities package
      run: |
        cosmogony2cities_package="package-${{env.debian_version}}.zip"
        python core_team_ci_tools/github_artifacts/github_artifacts.py \
            -o hove-io \
            -r cosmogony2cities \
            -t  ${{secrets.access_token_github}} \
            -w build_package.yml \
            -a $cosmogony2cities_package \
            --output-dir .
        unzip -qo $cosmogony2cities_package
        rm -f $cosmogony2cities_package

    - name: Download libkeepalive
      run: |
        wget http://prdownloads.sourceforge.net/libkeepalive/libkeepalive-0.3.tar.gz

    - name: Checkout navitia
      uses: actions/checkout@v3
      with:
        submodules : recursive
        path: navitia
        fetch-depth: 0

    - name: Restore ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build_dockers
        max-size: 2000M
        save: ${{ github.event_name == 'push' }}

    - name: Create master docker
      run: |
        docker build -f navitia/docker/${{env.debian_version}}/Dockerfile-master -t navitia/master .

    - name: Build packages in master docker
      # Will build navitia-*.deb packages in folder ../
      run: |
        docker run -v `pwd`:/build/ -w /navitia/ navitia/master


    # see https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    - name: Choose dev tag
      if: github.event_name == 'pull_request'
      run: |
        echo "building version dev"
        echo "navitia_tag=dev" >> $GITHUB_ENV
        echo "aws_branch=dev" >> $GITHUB_ENV

    - name: Choose release tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd navitia
        version=$(git describe)
        echo "building version $version"
        echo "navitia_tag=$version" >> $GITHUB_ENV
        echo "aws_branch=release" >> $GITHUB_ENV

    - name: Create dockers images and push them
      run: |
        components='jormungandr kraken tyr-beat tyr-worker tyr-web instances-configurator mock-kraken eitri'
        for component in $components; do
            echo "*********  Building $component ***************"
            docker build -t navitia/$component:${{env.navitia_tag}} -f  navitia/docker/${{env.debian_version}}/Dockerfile-${component} .

            # add latest tag if navitia_tag != dev
            if [[ "${{env.navitia_tag}}" != "dev" ]]; then
                docker tag navitia/$component:${{env.navitia_tag}}  navitia/$component:latest
            fi
        done

        docker login -u ${{secrets.docker_user}} -p ${{secrets.docker_password}}

        # for component in $components; do
        #     echo "*********  Pushing $component ***************"
        #     docker push --all-tags navitia/$component:${{env.navitia_tag}}
        # done

    # - name: Generate token for aws images
    #   id: app-token
    #   uses: getsentry/action-github-app-token@v2.0.0
    #   with:
    #     app_id: ${{ secrets.GA_OS_WORKFLOW_TRIGGER_APP_ID }}
    #     private_key: ${{ secrets.GA_OS_WORKFLOW_TRIGGER_APP_PEM }}

    # - name: Aws Dispatch Backend
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ steps.app-token.outputs.token }}
    #     repository: hove-io/core-backend-aws-assets
    #     event-type: build-trigger
    #     client-payload: '{"branch": "${{ env.aws_branch }}", "tag": "${{ env.navitia_tag }}"}'

    # - name: Aws Dispatch Frontend
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ steps.app-token.outputs.token }}
    #     repository: hove-io/core-front-aws-assets
    #     event-type: build-trigger
    #     client-payload: '{"branch": "${{ env.aws_branch }}", "tag": "${{ env.navitia_tag  }}"}'

    # - name: Run artemis on push to dev
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    #   uses: peter-evans/repository-dispatch@v2
    #   with:
    #     token: ${{ secrets.access_token_github }}
    #     repository: hove-io/artemis
    #     event-type: run_artemis_ng

    # - name: failure notification
    #   if: failure()
    #   run: |
    #       echo '{"text":":warning: Github Actions: build_dockers for ${{env.navitia_tag}} failed !"}' | http --json POST ${{secrets.SLACK_NAVITIA_CORE_TEAM_URL}}

    # - name: success notification on navitia core team
    #   if: success()
    #   run: |
    #       echo '{"text":":octopus: Github Actions: build_dockers succeeded. New navitia ${{env.navitia_tag}} image available.' | http --json POST ${{secrets.SLACK_NAVITIA_CORE_TEAM_URL}}
